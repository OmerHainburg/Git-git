Harry Programmer and the Sorcerer’s Code: Scene 1 -> Press Enter

Now that we have started working on the screenplay,
let’s turn the sorcerers-code directory into a Git project. We do this with:
git init -> Press Enter
$ git init
Initialized empty Git repository in /home/ccuser/workspace/sorcerers-code/.git/


Git Workflow
Nice! We have a Git project. A Git project can be thought of as having three parts:
A Working Directory: where you’ll be doing all the work: creating, editing,
deleting and organizing files
A Staging Area: where you’ll list changes you make to the working directory
A Repository: where Git permanently stores those changes as different versions of the project
The Git workflow consists of editing files in the working directory,
adding files to the staging area, and saving changes to a Git repository. In Git,
 we save changes with a commit, which we will learn more about in this lesson.

 git status
As you write the screenplay, you will be changing the contents of the working directory.
You can check the status of those changes with:
git status -> Press Enter
$ git status
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        init_test.rb
        scene-1.txt

nothing added to commit but untracked files present (use "git add" to track)

git add
In order for Git to start tracking scene-1.txt, the file needs to be added to the staging area.
We can add a file to the staging area with:
git add filename
$ git add scene-1.txt
$ git status
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   scene-1.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        add_test.rb
        init_test.rb

git diff
Good work! Now you know how to add a file to the staging area.
Imagine that we type another line in scene-1.txt. Since the file is tracked,
we can check the differences between the working directory and the staging area with:

git diff filename
Here, filename is the actual name of the file. If the name of my file was changes.txt the command would be
git diff changes.txt
Harry Programmer and the Sorcerer’s Code: Scene 1
Dumblediff: I should've known you would be here, Professor McGonagit.

git commit
A commit is the last step in our Git workflow. A commit permanently stores changes
from the staging area inside the repository.
git commit is the command we’ll do next. However, one more bit of code is needed for
a commit: the option -m followed by a message. Here’s an example:
git commit -m "Complete first line of dialogue"
Standard Conventions for Commit Messages:
Must be in quotation marks
Written in the present tense
Should be brief (50 characters or less) when using -m
$ git commit -m "Complete first line of dialogue"
[master (root-commit) c26be4b] Complete first line of dialogue
 1 file changed, 3 insertions(+)
 create mode 100644 scene-1.txt

git log
Often with Git, you’ll need to refer back to an earlier version of a project.
Commits are stored chronologically in the repository and can be viewed with:
git log  
$ git commit -m "Complete first line of dialogue"
[master (root-commit) c26be4b] Complete first line of dialogue
 1 file changed, 3 insertions(+)
 create mode 100644 scene-1.txt
$ git log
commit c26be4b61794461af522691eacb31d1c8a1dc85f
Author: codecademy <ccuser@codecademy.com>
Date:   Thu Feb 10 20:07:01 2022 +0000
    Complete first line of dialogue

Generalizations
You have now been introduced to the fundamental Git workflow. You learned a lot!
 Let’s take a moment to generalize:

Git is the industry-standard version control system for web developers
Use Git commands to help keep track of changes made to a project:
git init creates a new Git repository
git status inspects the contents of the working directory and staging area
git add adds files from the working directory to the staging area
git diff shows the difference between the working directory and the staging area
git commit permanently stores file changes from the staging area in the repository
git log shows a list of all previous commits




